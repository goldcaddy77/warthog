import * as prettier from 'prettier';
import { Container } from 'typedi';
import { EntityMetadata } from 'typeorm';

import { logger, Logger } from '../core/logger';
import {
  entityListToImports,
  entityToCreateInput,
  entityToCreateManyArgs,
  entityToOrderByEnum,
  entityToUpdateInput,
  entityToUpdateInputArgs,
  entityToWhereArgs,
  entityToWhereInput,
  entityToWhereUniqueInput
} from './TypeORMConverter';

export class SchemaGenerator {
  static logger: Logger = Container.has('warthog.logger')
    ? Container.get('warthog.logger')
    : logger;

  static generate(
    entities: EntityMetadata[],
    // This will reference 'warthog in the deployed module, but we need to do a relative import in the examples library
    warthogImportPath: string = 'warthog'
  ): string {
    let template = `
      // This file has been auto-generated by Warthog.  Do not update directly as it
      // will be re-written.  If you need to change this file, update models or add
      // new TypeGraphQL objects
      import { ArgsType, Field as TypeGraphQLField, ID, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
      import { registerEnumType } from 'type-graphql';
      import { BaseWhereInput, PaginationArgs } from '${warthogImportPath}';
      ${entityListToImports(entities).join('')}
    `;

    entities.forEach((entity: EntityMetadata) => {
      template += `
        ${entityToOrderByEnum(entity)}
        ${entityToWhereInput(entity)}
        ${entityToWhereUniqueInput(entity)}
        ${entityToCreateInput(entity)}
        ${entityToUpdateInput(entity)}
        ${entityToWhereArgs(entity)}
        ${entityToCreateManyArgs(entity)}
        ${entityToUpdateInputArgs(entity)}
      `;
    });

    return this.format(template);
  }

  static format(code: string, options: prettier.Options = {}) {
    try {
      // TODO: grab our prettier options (single quote, etc...)
      return prettier.format(code, {
        ...options,
        parser: 'typescript'
      });
    } catch (e) {
      this.logger.log(
        `There is a syntax error in generated code, unformatted code printed, error: ${JSON.stringify(
          e
        )}`
      );
      return code;
    }
  }
}
