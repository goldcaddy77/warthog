// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`schema test schema doesn't change 1`] = `
"type ApiOnly {
  id: ID!
  name: String!
}

input ApiOnlyCreateInput {
  name: String!
}

input ApiOnlyUpdateInput {
  name: String
}

input ApiOnlyWhereInput {
  id_eq: ID
  id_in: [ID!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
}

input ApiOnlyWhereUniqueInput {
  id: ID!
}

interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

\\"\\"\\"
A date string, such as 2007-12-03, compliant with the \`full-date\` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
\\"\\"\\"
scalar Date

\\"\\"\\"
The javascript \`Date\` as string. Type represents date and time as the ISO Date string.
\\"\\"\\"
scalar DateTime

type DbOnly {
  stringField: String!
}

interface DeleteResponse {
  id: ID!
}

type Dish {
  id: ID!
  createdAt: DateTime!
  name: String!
  stringEnumField: StringEnum
  kitchenSink: KitchenSink!
  kitchenSinkId: String!
}

type DishConnection {
  nodes: [Dish!]!
  pageInfo: PageInfo!
}

input DishCreateInput {
  name: String!
  stringEnumField: StringEnum
  kitchenSinkId: ID!
}

enum DishOrderByInput {
  createdAt_ASC
  createdAt_DESC
  name_ASC
  name_DESC
  stringEnumField_ASC
  stringEnumField_DESC
  kitchenSinkId_ASC
  kitchenSinkId_DESC
}

input DishUpdateInput {
  name: String
  stringEnumField: StringEnum
  kitchenSinkId: ID
}

input DishWhereInput {
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  stringEnumField_eq: StringEnum
  stringEnumField_in: [StringEnum!]
  kitchenSinkId_eq: ID
  kitchenSinkId_in: [ID!]
}

input DishWhereUniqueInput {
  id: ID!
}

\\"\\"\\"
The \`JSONObject\` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
\\"\\"\\"
scalar JSONObject

type KitchenSink {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!

  \\"\\"\\"This is a string field\\"\\"\\"
  stringField: String!
  nullableStringField: String
  dateField: DateTime
  dateOnlyField: Date
  dateTimeField: DateTime
  emailField: String!
  integerField: Int!
  booleanField: Boolean!
  floatField: Float!
  jsonField: JSONObject
  idField: String
  stringEnumField: StringEnum
  dishes: [Dish!]
  numericField: Float
  numericFieldCustomPrecisionScale: Float
  noFilterField: String
  noSortField: String
  noFilterOrSortField: String
  stringFieldFilterEqContains: String
  intFieldFilterLteGte: Int
  characterField: String
  customTextFieldNoSortOrFilter: String
  customFieldArrayColumn: [String!]
  readonlyField: String
  apiOnlyField: String
  arrayOfStrings: [String!]
  arrayOfInts: [Int!]
}

input KitchenSinkCreateInput {
  stringField: String!
  nullableStringField: String
  dateField: DateTime
  dateOnlyField: Date
  dateTimeField: DateTime
  emailField: String!
  integerField: Float!
  booleanField: Boolean!
  floatField: Float!
  jsonField: JSONObject
  idField: ID
  stringEnumField: StringEnum
  numericField: Float
  numericFieldCustomPrecisionScale: Float
  noFilterField: String
  noSortField: String
  noFilterOrSortField: String
  stringFieldFilterEqContains: String
  intFieldFilterLteGte: Float
  characterField: String
  customTextFieldNoSortOrFilter: String
  customFieldArrayColumn: [String!]
  writeonlyField: String
  apiOnlyField: String
  arrayOfStrings: [String!]
  arrayOfInts: [Int!]
}

enum KitchenSinkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  createdById_ASC
  createdById_DESC
  updatedAt_ASC
  updatedAt_DESC
  updatedById_ASC
  updatedById_DESC
  deletedAt_ASC
  deletedAt_DESC
  deletedById_ASC
  deletedById_DESC
  version_ASC
  version_DESC
  stringField_ASC
  stringField_DESC
  nullableStringField_ASC
  nullableStringField_DESC
  dateField_ASC
  dateField_DESC
  dateOnlyField_ASC
  dateOnlyField_DESC
  dateTimeField_ASC
  dateTimeField_DESC
  emailField_ASC
  emailField_DESC
  integerField_ASC
  integerField_DESC
  booleanField_ASC
  booleanField_DESC
  floatField_ASC
  floatField_DESC
  idField_ASC
  idField_DESC
  stringEnumField_ASC
  stringEnumField_DESC
  numericField_ASC
  numericField_DESC
  numericFieldCustomPrecisionScale_ASC
  numericFieldCustomPrecisionScale_DESC
  noFilterField_ASC
  noFilterField_DESC
  characterField_ASC
  characterField_DESC
  readonlyField_ASC
  readonlyField_DESC
  apiOnlyField_ASC
  apiOnlyField_DESC
}

input KitchenSinkUpdateInput {
  stringField: String
  nullableStringField: String
  dateField: DateTime
  dateOnlyField: Date
  dateTimeField: DateTime
  emailField: String
  integerField: Float
  booleanField: Boolean
  floatField: Float
  jsonField: JSONObject
  idField: ID
  stringEnumField: StringEnum
  numericField: Float
  numericFieldCustomPrecisionScale: Float
  noFilterField: String
  noSortField: String
  noFilterOrSortField: String
  stringFieldFilterEqContains: String
  intFieldFilterLteGte: Float
  characterField: String
  customTextFieldNoSortOrFilter: String
  customFieldArrayColumn: [String!]
  writeonlyField: String
  apiOnlyField: String
  arrayOfStrings: [String!]
  arrayOfInts: [Int!]
}

input KitchenSinkWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  stringField_eq: String
  stringField_contains: String
  stringField_startsWith: String
  stringField_endsWith: String
  stringField_in: [String!]
  nullableStringField_eq: String
  nullableStringField_contains: String
  nullableStringField_startsWith: String
  nullableStringField_endsWith: String
  nullableStringField_in: [String!]
  dateField_eq: DateTime
  dateField_lt: DateTime
  dateField_lte: DateTime
  dateField_gt: DateTime
  dateField_gte: DateTime
  dateOnlyField_eq: Date
  dateOnlyField_lt: Date
  dateOnlyField_lte: Date
  dateOnlyField_gt: Date
  dateOnlyField_gte: Date
  dateTimeField_eq: DateTime
  dateTimeField_lt: DateTime
  dateTimeField_lte: DateTime
  dateTimeField_gt: DateTime
  dateTimeField_gte: DateTime
  emailField_eq: String
  emailField_contains: String
  emailField_startsWith: String
  emailField_endsWith: String
  emailField_in: [String!]
  integerField_eq: Int
  integerField_gt: Int
  integerField_gte: Int
  integerField_lt: Int
  integerField_lte: Int
  integerField_in: [Int!]
  booleanField_eq: Boolean
  booleanField_in: [Boolean!]
  floatField_eq: Float
  floatField_gt: Float
  floatField_gte: Float
  floatField_lt: Float
  floatField_lte: Float
  floatField_in: [Float!]
  jsonField_json: JSONObject
  idField_eq: ID
  idField_in: [ID!]
  stringEnumField_eq: StringEnum
  stringEnumField_in: [StringEnum!]
  numericField_eq: Float
  numericField_gt: Float
  numericField_gte: Float
  numericField_lt: Float
  numericField_lte: Float
  numericField_in: [Float!]
  numericFieldCustomPrecisionScale_eq: Float
  numericFieldCustomPrecisionScale_gt: Float
  numericFieldCustomPrecisionScale_gte: Float
  numericFieldCustomPrecisionScale_lt: Float
  numericFieldCustomPrecisionScale_lte: Float
  numericFieldCustomPrecisionScale_in: [Float!]
  noSortField_eq: String
  noSortField_contains: String
  noSortField_startsWith: String
  noSortField_endsWith: String
  noSortField_in: [String!]
  stringFieldFilterEqContains_eq: String
  stringFieldFilterEqContains_contains: String
  intFieldFilterLteGte_gte: Int
  intFieldFilterLteGte_lte: Int
  characterField_eq: String
  characterField_contains: String
  characterField_startsWith: String
  characterField_endsWith: String
  characterField_in: [String!]
  readonlyField_eq: String
  readonlyField_contains: String
  readonlyField_startsWith: String
  readonlyField_endsWith: String
  readonlyField_in: [String!]
  apiOnlyField_eq: String
  apiOnlyField_contains: String
  apiOnlyField_startsWith: String
  apiOnlyField_endsWith: String
  apiOnlyField_in: [String!]
  arrayOfStrings_containsAll: [String!]
  arrayOfStrings_containsNone: [String!]
  arrayOfStrings_containsAny: [String!]
  arrayOfInts_containsAll: [Int!]
  arrayOfInts_containsNone: [Int!]
  arrayOfInts_containsAny: [Int!]
}

input KitchenSinkWhereUniqueInput {
  id: ID
  emailField: String
}

type Mutation {
  createDish(data: DishCreateInput!): Dish!
  updateDish(data: DishUpdateInput!, where: DishWhereUniqueInput!): Dish!
  createManyDishs(data: [DishCreateInput!]!): [Dish!]!
  deleteDish(where: DishWhereUniqueInput!): StandardDeleteResponse!
  successfulTransaction(data: DishCreateInput!): [Dish!]!
  failedTransaction(data: DishCreateInput!): [Dish!]!
  createKitchenSink(data: KitchenSinkCreateInput!): KitchenSink!
  createManyKitchenSinks(data: [KitchenSinkCreateInput!]!): [KitchenSink!]!
  updateKitchenSink(data: KitchenSinkUpdateInput!, where: KitchenSinkWhereUniqueInput!): KitchenSink!
  deleteKitchenSink(where: KitchenSinkWhereUniqueInput!): StandardDeleteResponse!
}

type PageInfo {
  limit: Float!
  offset: Float!
  totalCount: Float!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

type Query {
  dishes(offset: Int, limit: Int = 50, where: DishWhereInput, orderBy: DishOrderByInput): [Dish!]!
  dishConnection(offset: Int, limit: Int = 50, where: DishWhereInput, orderBy: DishOrderByInput): DishConnection!
  dish(where: DishWhereUniqueInput!): Dish!
  kitchenSinks(offset: Int, limit: Int = 50, where: KitchenSinkWhereInput, orderBy: KitchenSinkOrderByInput): [KitchenSink!]!
  kitchenSink(where: KitchenSinkWhereUniqueInput!): KitchenSink!
}

type StandardDeleteResponse {
  id: ID!
}

enum StringEnum {
  FOO
  BAR
}
"
`;
