import * as prettier from 'prettier';

import { logger, Logger } from '../core/logger';
import {
  generateEnumMapImports,
  modelToCreateInput,
  modelToCreateManyArgs,
  modelToOrderByEnum,
  modelToUpdateInput,
  modelToUpdateInputArgs,
  modelToWhereArgs,
  modelToWhereInput,
  modelToWhereUniqueInput
} from './model-to-classes';
import { getMetadataStorage, ModelMetadata } from '../metadata';

export class SchemaGenerator {
  // TODO: @warthog fix logger
  // static logger: Logger = Container.has('warthog.logger')
  //   ? Container.get('warthog.logger')
  //   : logger;
  static logger: Logger = logger;

  static generate(
    // This will reference 'warthog in the deployed module, but we need to do a relative import in the examples library
    warthogImportPath = 'warthog'
  ): string {
    const metadata = getMetadataStorage();
    let template = `
      // This file has been auto-generated by Warthog.  Do not update directly as it
      // will be re-written.  If you need to change this file, update models or add
      // new TypeGraphQL objects
      // @ts-ignore
      import { GraphQLDateTime as DateTime } from 'graphql-iso-date';
      // @ts-ignore
      import { GraphQLID as ID } from 'graphql';
      // @ts-ignore
      import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
      // @ts-ignore
      import { registerEnumType } from 'type-graphql';

      // @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
      const { GraphQLJSONObject } = require('graphql-type-json');

      // @ts-ignore
      import { BaseWhereInput, JsonObject, PaginationArgs } from '${warthogImportPath}';
      ${generateEnumMapImports().join('')}
    `;

    Object.keys(metadata.getModels()).forEach((modelName: string) => {
      const model: ModelMetadata = metadata.getModel(modelName);

      template += `
        ${modelToOrderByEnum(model)}
        ${modelToWhereInput(model)}
        ${modelToWhereUniqueInput(model)}
        ${modelToCreateInput(model)}
        ${modelToUpdateInput(model)}
        ${modelToWhereArgs(model)}
        ${modelToCreateManyArgs(model)}
        ${modelToUpdateInputArgs(model)}
      `;
    });

    return this.format(template);
  }

  static format(code: string, options: prettier.Options = {}) {
    try {
      // TODO: grab our prettier options (single quote, etc...)
      return prettier.format(code, {
        ...options,
        parser: 'typescript'
      });
    } catch (e) {
      this.logger.error(
        `There is a syntax error in generated code, unformatted code printed, error: ${JSON.stringify(
          e
        )}`
      );
      return code;
    }
  }
}
