"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Mutation {
  createPost(data: PostCreateInput!): Post!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  deletePost(where: PostWhereUniqueInput!): StandardDeleteResponse!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  deleteUser(where: UserWhereUniqueInput!): StandardDeleteResponse!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Post {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  updatedAt: DateTime
  updatedById: ID
  deletedAt: DateTime
  deletedById: ID
  version: Int!
  ownerId: ID!
  title: String!
  user: User!
  userId: ID!
}

input PostCreateInput {
  title: String!
  userId: ID!
}

enum PostOrderByInput {
  title_ASC
  title_DESC
  userId_ASC
  userId_DESC
  createdAt_ASC
  createdAt_DESC
  createdById_ASC
  createdById_DESC
  updatedAt_ASC
  updatedAt_DESC
  updatedById_ASC
  updatedById_DESC
  deletedAt_ASC
  deletedAt_DESC
  deletedById_ASC
  deletedById_DESC
  version_ASC
  version_DESC
  ownerId_ASC
  ownerId_DESC
  id_ASC
  id_DESC
}

input PostUpdateInput {
  title: String
  userId: ID
}

input PostWhereInput {
  title_eq: String
  title_contains: String
  title_startsWith: String
  title_endsWith: String
  title_in: [String!]
  userId_eq: ID
  userId_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  ownerId_eq: ID
  ownerId_in: [ID!]
  id_in: [ID!]
}

input PostWhereUniqueInput {
  id: ID!
}

type Query {
  posts(offset: Int, limit: Int = 50, where: PostWhereInput, orderBy: PostOrderByInput): [Post!]!
  post(where: PostWhereUniqueInput!): Post!
  users(offset: Int, limit: Int = 50, where: UserWhereInput, orderBy: UserOrderByInput): [User!]!
  user(where: UserWhereUniqueInput!): User!
}

type StandardDeleteResponse {
  id: ID!
}

type User {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  updatedAt: DateTime
  updatedById: ID
  deletedAt: DateTime
  deletedById: ID
  version: Int!
  ownerId: ID!
  firstName: String!
  posts: [Post!]
}

input UserCreateInput {
  firstName: String!
}

enum UserOrderByInput {
  firstName_ASC
  firstName_DESC
  createdAt_ASC
  createdAt_DESC
  createdById_ASC
  createdById_DESC
  updatedAt_ASC
  updatedAt_DESC
  updatedById_ASC
  updatedById_DESC
  deletedAt_ASC
  deletedAt_DESC
  deletedById_ASC
  deletedById_DESC
  version_ASC
  version_DESC
  ownerId_ASC
  ownerId_DESC
  id_ASC
  id_DESC
}

input UserUpdateInput {
  firstName: String
}

input UserWhereInput {
  firstName_eq: String
  firstName_contains: String
  firstName_startsWith: String
  firstName_endsWith: String
  firstName_in: [String!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  ownerId_eq: ID
  ownerId_in: [ID!]
  id_in: [ID!]
}

input UserWhereUniqueInput {
  id: ID!
}
