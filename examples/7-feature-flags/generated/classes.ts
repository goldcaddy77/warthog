// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
import {
  ArgsType,
  Field as TypeGraphQLField,
  Float,
  ID,
  InputType as TypeGraphQLInputType,
  Int
} from "type-graphql";
import { registerEnumType } from "type-graphql";

// tslint:disable-next-line:no-var-requires
const { GraphQLJSONObject } = require("graphql-type-json");

import { BaseWhereInput, PaginationArgs } from "../../../src";
import { Environment } from "../src/environment/environment.model";
import { FeatureFlagSegment } from "../src/feature-flag-segment/feature-flag-segment.model";
import { FeatureFlagUser } from "../src/feature-flag-user/feature-flag-user.model";
import { FeatureFlag } from "../src/feature-flag/feature-flag.model";
import { Project } from "../src/project/project.model";
import { Segment } from "../src/segment/segment.model";
import { UserSegment } from "../src/user-segment/user-segment.model";
import { User } from "../src/user/user.model";

export enum EnvironmentOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  key_ASC = "key_ASC",
  key_DESC = "key_DESC"
}

registerEnumType(EnvironmentOrderByEnum, {
  name: "EnvironmentOrderByInput"
});

@TypeGraphQLInputType()
export class EnvironmentWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  key_eq?: string;

  @TypeGraphQLField({ nullable: true })
  key_contains?: string;

  @TypeGraphQLField({ nullable: true })
  key_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  key_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  key_in?: string[];
}

@TypeGraphQLInputType()
export class EnvironmentWhereUniqueInput {
  @TypeGraphQLField(type => String, { nullable: true })
  id?: string;

  @TypeGraphQLField(type => String, { nullable: true })
  key?: string;
}

@TypeGraphQLInputType()
export class EnvironmentCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  key!: string;
}

@TypeGraphQLInputType()
export class EnvironmentUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  key?: string;
}

@ArgsType()
export class EnvironmentWhereArgs extends PaginationArgs {
  @TypeGraphQLField(type => EnvironmentWhereInput, { nullable: true })
  where?: EnvironmentWhereInput;

  @TypeGraphQLField(type => EnvironmentOrderByEnum, { nullable: true })
  orderBy?: EnvironmentOrderByEnum;
}

@ArgsType()
export class EnvironmentCreateManyArgs {
  @TypeGraphQLField(type => [EnvironmentCreateInput])
  data!: EnvironmentCreateInput[];
}

@ArgsType()
export class EnvironmentUpdateArgs {
  @TypeGraphQLField() data!: EnvironmentUpdateInput;
  @TypeGraphQLField() where!: EnvironmentWhereUniqueInput;
}

export enum FeatureFlagSegmentOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  firstName_ASC = "firstName_ASC",
  firstName_DESC = "firstName_DESC"
}

registerEnumType(FeatureFlagSegmentOrderByEnum, {
  name: "FeatureFlagSegmentOrderByInput"
});

@TypeGraphQLInputType()
export class FeatureFlagSegmentWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  firstName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  firstName_in?: string[];
}

@TypeGraphQLInputType()
export class FeatureFlagSegmentWhereUniqueInput {
  @TypeGraphQLField(type => String)
  id?: string;
}

@TypeGraphQLInputType()
export class FeatureFlagSegmentCreateInput {
  @TypeGraphQLField()
  firstName!: string;
}

@TypeGraphQLInputType()
export class FeatureFlagSegmentUpdateInput {
  @TypeGraphQLField({ nullable: true })
  firstName?: string;
}

@ArgsType()
export class FeatureFlagSegmentWhereArgs extends PaginationArgs {
  @TypeGraphQLField(type => FeatureFlagSegmentWhereInput, { nullable: true })
  where?: FeatureFlagSegmentWhereInput;

  @TypeGraphQLField(type => FeatureFlagSegmentOrderByEnum, { nullable: true })
  orderBy?: FeatureFlagSegmentOrderByEnum;
}

@ArgsType()
export class FeatureFlagSegmentCreateManyArgs {
  @TypeGraphQLField(type => [FeatureFlagSegmentCreateInput])
  data!: FeatureFlagSegmentCreateInput[];
}

@ArgsType()
export class FeatureFlagSegmentUpdateArgs {
  @TypeGraphQLField() data!: FeatureFlagSegmentUpdateInput;
  @TypeGraphQLField() where!: FeatureFlagSegmentWhereUniqueInput;
}

export enum FeatureFlagUserOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  firstName_ASC = "firstName_ASC",
  firstName_DESC = "firstName_DESC",

  lastName_ASC = "lastName_ASC",
  lastName_DESC = "lastName_DESC"
}

registerEnumType(FeatureFlagUserOrderByEnum, {
  name: "FeatureFlagUserOrderByInput"
});

@TypeGraphQLInputType()
export class FeatureFlagUserWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  firstName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  firstName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  lastName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  lastName_in?: string[];
}

@TypeGraphQLInputType()
export class FeatureFlagUserWhereUniqueInput {
  @TypeGraphQLField(type => String)
  id?: string;
}

@TypeGraphQLInputType()
export class FeatureFlagUserCreateInput {
  @TypeGraphQLField()
  firstName!: string;

  @TypeGraphQLField()
  lastName!: string;
}

@TypeGraphQLInputType()
export class FeatureFlagUserUpdateInput {
  @TypeGraphQLField({ nullable: true })
  firstName?: string;

  @TypeGraphQLField({ nullable: true })
  lastName?: string;
}

@ArgsType()
export class FeatureFlagUserWhereArgs extends PaginationArgs {
  @TypeGraphQLField(type => FeatureFlagUserWhereInput, { nullable: true })
  where?: FeatureFlagUserWhereInput;

  @TypeGraphQLField(type => FeatureFlagUserOrderByEnum, { nullable: true })
  orderBy?: FeatureFlagUserOrderByEnum;
}

@ArgsType()
export class FeatureFlagUserCreateManyArgs {
  @TypeGraphQLField(type => [FeatureFlagUserCreateInput])
  data!: FeatureFlagUserCreateInput[];
}

@ArgsType()
export class FeatureFlagUserUpdateArgs {
  @TypeGraphQLField() data!: FeatureFlagUserUpdateInput;
  @TypeGraphQLField() where!: FeatureFlagUserWhereUniqueInput;
}

export enum FeatureFlagOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  firstName_ASC = "firstName_ASC",
  firstName_DESC = "firstName_DESC",

  lastName_ASC = "lastName_ASC",
  lastName_DESC = "lastName_DESC"
}

registerEnumType(FeatureFlagOrderByEnum, {
  name: "FeatureFlagOrderByInput"
});

@TypeGraphQLInputType()
export class FeatureFlagWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  firstName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  firstName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  lastName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  lastName_in?: string[];
}

@TypeGraphQLInputType()
export class FeatureFlagWhereUniqueInput {
  @TypeGraphQLField(type => String)
  id?: string;
}

@TypeGraphQLInputType()
export class FeatureFlagCreateInput {
  @TypeGraphQLField()
  firstName!: string;

  @TypeGraphQLField()
  lastName!: string;
}

@TypeGraphQLInputType()
export class FeatureFlagUpdateInput {
  @TypeGraphQLField({ nullable: true })
  firstName?: string;

  @TypeGraphQLField({ nullable: true })
  lastName?: string;
}

@ArgsType()
export class FeatureFlagWhereArgs extends PaginationArgs {
  @TypeGraphQLField(type => FeatureFlagWhereInput, { nullable: true })
  where?: FeatureFlagWhereInput;

  @TypeGraphQLField(type => FeatureFlagOrderByEnum, { nullable: true })
  orderBy?: FeatureFlagOrderByEnum;
}

@ArgsType()
export class FeatureFlagCreateManyArgs {
  @TypeGraphQLField(type => [FeatureFlagCreateInput])
  data!: FeatureFlagCreateInput[];
}

@ArgsType()
export class FeatureFlagUpdateArgs {
  @TypeGraphQLField() data!: FeatureFlagUpdateInput;
  @TypeGraphQLField() where!: FeatureFlagWhereUniqueInput;
}

export enum ProjectOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  key_ASC = "key_ASC",
  key_DESC = "key_DESC"
}

registerEnumType(ProjectOrderByEnum, {
  name: "ProjectOrderByInput"
});

@TypeGraphQLInputType()
export class ProjectWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  key_eq?: string;

  @TypeGraphQLField({ nullable: true })
  key_contains?: string;

  @TypeGraphQLField({ nullable: true })
  key_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  key_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  key_in?: string[];
}

@TypeGraphQLInputType()
export class ProjectWhereUniqueInput {
  @TypeGraphQLField(type => String, { nullable: true })
  id?: string;

  @TypeGraphQLField(type => String, { nullable: true })
  key?: string;
}

@TypeGraphQLInputType()
export class ProjectCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  key!: string;
}

@TypeGraphQLInputType()
export class ProjectUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  key?: string;
}

@ArgsType()
export class ProjectWhereArgs extends PaginationArgs {
  @TypeGraphQLField(type => ProjectWhereInput, { nullable: true })
  where?: ProjectWhereInput;

  @TypeGraphQLField(type => ProjectOrderByEnum, { nullable: true })
  orderBy?: ProjectOrderByEnum;
}

@ArgsType()
export class ProjectCreateManyArgs {
  @TypeGraphQLField(type => [ProjectCreateInput])
  data!: ProjectCreateInput[];
}

@ArgsType()
export class ProjectUpdateArgs {
  @TypeGraphQLField() data!: ProjectUpdateInput;
  @TypeGraphQLField() where!: ProjectWhereUniqueInput;
}

export enum SegmentOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  firstName_ASC = "firstName_ASC",
  firstName_DESC = "firstName_DESC",

  lastName_ASC = "lastName_ASC",
  lastName_DESC = "lastName_DESC"
}

registerEnumType(SegmentOrderByEnum, {
  name: "SegmentOrderByInput"
});

@TypeGraphQLInputType()
export class SegmentWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  firstName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  firstName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  lastName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  lastName_in?: string[];
}

@TypeGraphQLInputType()
export class SegmentWhereUniqueInput {
  @TypeGraphQLField(type => String)
  id?: string;
}

@TypeGraphQLInputType()
export class SegmentCreateInput {
  @TypeGraphQLField()
  firstName!: string;

  @TypeGraphQLField()
  lastName!: string;
}

@TypeGraphQLInputType()
export class SegmentUpdateInput {
  @TypeGraphQLField({ nullable: true })
  firstName?: string;

  @TypeGraphQLField({ nullable: true })
  lastName?: string;
}

@ArgsType()
export class SegmentWhereArgs extends PaginationArgs {
  @TypeGraphQLField(type => SegmentWhereInput, { nullable: true })
  where?: SegmentWhereInput;

  @TypeGraphQLField(type => SegmentOrderByEnum, { nullable: true })
  orderBy?: SegmentOrderByEnum;
}

@ArgsType()
export class SegmentCreateManyArgs {
  @TypeGraphQLField(type => [SegmentCreateInput])
  data!: SegmentCreateInput[];
}

@ArgsType()
export class SegmentUpdateArgs {
  @TypeGraphQLField() data!: SegmentUpdateInput;
  @TypeGraphQLField() where!: SegmentWhereUniqueInput;
}

export enum UserSegmentOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  firstName_ASC = "firstName_ASC",
  firstName_DESC = "firstName_DESC",

  lastName_ASC = "lastName_ASC",
  lastName_DESC = "lastName_DESC"
}

registerEnumType(UserSegmentOrderByEnum, {
  name: "UserSegmentOrderByInput"
});

@TypeGraphQLInputType()
export class UserSegmentWhereInput extends BaseWhereInput {
  @TypeGraphQLField({ nullable: true })
  firstName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  firstName_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  firstName_in?: string[];

  @TypeGraphQLField({ nullable: true })
  lastName_eq?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_contains?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  lastName_endsWith?: string;

  @TypeGraphQLField(type => [String], { nullable: true })
  lastName_in?: string[];
}

@TypeGraphQLInputType()
export class UserSegmentWhereUniqueInput {
  @TypeGraphQLField(type => String)
  id?: string;
}

@TypeGraphQLInputType()
export class UserSegmentCreateInput {
  @TypeGraphQLField()
  firstName!: string;

  @TypeGraphQLField()
  lastName!: string;
}

@TypeGraphQLInputType()
export class UserSegmentUpdateInput {
  @TypeGraphQLField({ nullable: true })
  firstName?: string;

  @TypeGraphQLField({ nullable: true })
  lastName?: string;
}

@ArgsType()
export class UserSegmentWhereArgs extends PaginationArgs {
  @TypeGraphQLField(type => UserSegmentWhereInput, { nullable: true })
  where?: UserSegmentWhereInput;

  @TypeGraphQLField(type => UserSegmentOrderByEnum, { nullable: true })
  orderBy?: UserSegmentOrderByEnum;
}

@ArgsType()
export class UserSegmentCreateManyArgs {
  @TypeGraphQLField(type => [UserSegmentCreateInput])
  data!: UserSegmentCreateInput[];
}

@ArgsType()
export class UserSegmentUpdateArgs {
  @TypeGraphQLField() data!: UserSegmentUpdateInput;
  @TypeGraphQLField() where!: UserSegmentWhereUniqueInput;
}

export enum UserOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC"
}

registerEnumType(UserOrderByEnum, {
  name: "UserOrderByInput"
});

@TypeGraphQLInputType()
export class UserWhereInput extends BaseWhereInput {}

@TypeGraphQLInputType()
export class UserWhereUniqueInput {
  @TypeGraphQLField(type => String)
  id?: string;
}

@TypeGraphQLInputType()
export class UserCreateInput {}

@TypeGraphQLInputType()
export class UserUpdateInput {}

@ArgsType()
export class UserWhereArgs extends PaginationArgs {
  @TypeGraphQLField(type => UserWhereInput, { nullable: true })
  where?: UserWhereInput;

  @TypeGraphQLField(type => UserOrderByEnum, { nullable: true })
  orderBy?: UserOrderByEnum;
}

@ArgsType()
export class UserCreateManyArgs {
  @TypeGraphQLField(type => [UserCreateInput])
  data!: UserCreateInput[];
}

@ArgsType()
export class UserUpdateArgs {
  @TypeGraphQLField() data!: UserUpdateInput;
  @TypeGraphQLField() where!: UserWhereUniqueInput;
}
