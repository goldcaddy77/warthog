interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format
outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for
representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

type Mutation {
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  deleteUser(where: UserWhereUniqueInput!): StandardDeleteResponse!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  users(offset: Int, limit: Int = 50, where: UserWhereInput, orderBy: UserOrderByInput): [User!]!
  user(where: UserWhereUniqueInput!): User!
}

type StandardDeleteResponse {
  id: ID!
}

enum StringEnum {
  FOO
  BAR
}

type User implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  booleanField: Boolean
  dateField: DateTime
  dateOnlyField: Date
  dateTimeField: DateTime
  emailField: String
  enumField: StringEnum
  floatField: Float
  realField: Float
  idField: String
  intFieldDefault: Int
  smallIntField: Int
  bigIntField: Int
  jsonField: JSONObject
  jsonFieldNoFilter: JSONObject

  """This is a string field"""
  stringField: String!
  noFilterField: String
  noSortField: String
  noFilterOrSortField: String
  stringFieldFilterEqContains: String
  intFieldFilterLteGte: Int
  numericField: Float
  numericFieldCustomPrecisionScale: Float
  charField: String
  characterField: String
  characterVaryingField: String
  textField: String
  varcharField: String
  geometryField: JSONObject
  intField: Int
  integerField: Int
  int2Field: Int
  int4Field: Int
  int8Field: Int
  float4Field: Float
  float8Field: Float
  doublePrecisionField: Float
  readonlyField: String
  apiOnlyField: String
  arrayOfStrings: [String!]
  arrayOfInts: [Int!]
}

input UserCreateInput {
  booleanField: Boolean
  dateField: DateTime
  dateOnlyField: Date
  dateTimeField: DateTime
  emailField: String
  enumField: StringEnum
  floatField: Float
  realField: Float
  idField: ID
  intFieldDefault: Float
  smallIntField: Float
  bigIntField: Float
  jsonField: JSONObject
  jsonFieldNoFilter: JSONObject
  stringField: String!
  noFilterField: String
  noSortField: String
  noFilterOrSortField: String
  stringFieldFilterEqContains: String
  intFieldFilterLteGte: Float
  numericField: Float
  numericFieldCustomPrecisionScale: Float
  charField: String
  characterField: String
  characterVaryingField: String
  textField: String
  varcharField: String
  geometryField: JSONObject
  intField: Float
  integerField: Float
  int2Field: Float
  int4Field: Float
  int8Field: Float
  float4Field: Float
  float8Field: Float
  doublePrecisionField: Float
  password: String
  writeonlyField: String
  apiOnlyField: String
  arrayOfStrings: [String!]
  arrayOfInts: [Int!]
}

enum UserOrderByInput {
  booleanField_ASC
  booleanField_DESC
  dateField_ASC
  dateField_DESC
  dateOnlyField_ASC
  dateOnlyField_DESC
  dateTimeField_ASC
  dateTimeField_DESC
  emailField_ASC
  emailField_DESC
  enumField_ASC
  enumField_DESC
  floatField_ASC
  floatField_DESC
  realField_ASC
  realField_DESC
  idField_ASC
  idField_DESC
  intFieldDefault_ASC
  intFieldDefault_DESC
  smallIntField_ASC
  smallIntField_DESC
  bigIntField_ASC
  bigIntField_DESC
  stringField_ASC
  stringField_DESC
  noFilterField_ASC
  noFilterField_DESC
  numericField_ASC
  numericField_DESC
  numericFieldCustomPrecisionScale_ASC
  numericFieldCustomPrecisionScale_DESC
  charField_ASC
  charField_DESC
  characterField_ASC
  characterField_DESC
  characterVaryingField_ASC
  characterVaryingField_DESC
  textField_ASC
  textField_DESC
  varcharField_ASC
  varcharField_DESC
  intField_ASC
  intField_DESC
  integerField_ASC
  integerField_DESC
  int2Field_ASC
  int2Field_DESC
  int4Field_ASC
  int4Field_DESC
  int8Field_ASC
  int8Field_DESC
  float4Field_ASC
  float4Field_DESC
  float8Field_ASC
  float8Field_DESC
  doublePrecisionField_ASC
  doublePrecisionField_DESC
  readonlyField_ASC
  readonlyField_DESC
  apiOnlyField_ASC
  apiOnlyField_DESC
}

input UserUpdateInput {
  booleanField: Boolean
  dateField: DateTime
  dateOnlyField: Date
  dateTimeField: DateTime
  emailField: String
  enumField: StringEnum
  floatField: Float
  realField: Float
  idField: ID
  intFieldDefault: Float
  smallIntField: Float
  bigIntField: Float
  jsonField: JSONObject
  jsonFieldNoFilter: JSONObject
  stringField: String
  noFilterField: String
  noSortField: String
  noFilterOrSortField: String
  stringFieldFilterEqContains: String
  intFieldFilterLteGte: Float
  numericField: Float
  numericFieldCustomPrecisionScale: Float
  charField: String
  characterField: String
  characterVaryingField: String
  textField: String
  varcharField: String
  geometryField: JSONObject
  intField: Float
  integerField: Float
  int2Field: Float
  int4Field: Float
  int8Field: Float
  float4Field: Float
  float8Field: Float
  doublePrecisionField: Float
  password: String
  writeonlyField: String
  apiOnlyField: String
  arrayOfStrings: [String!]
  arrayOfInts: [Int!]
}

input UserWhereInput {
  booleanField_eq: Boolean
  booleanField_in: [Boolean!]
  dateField_eq: DateTime
  dateField_lt: DateTime
  dateField_lte: DateTime
  dateField_gt: DateTime
  dateField_gte: DateTime
  dateOnlyField_eq: Date
  dateOnlyField_lt: Date
  dateOnlyField_lte: Date
  dateOnlyField_gt: Date
  dateOnlyField_gte: Date
  dateTimeField_eq: DateTime
  dateTimeField_lt: DateTime
  dateTimeField_lte: DateTime
  dateTimeField_gt: DateTime
  dateTimeField_gte: DateTime
  emailField_eq: String
  emailField_contains: String
  emailField_startsWith: String
  emailField_endsWith: String
  emailField_in: [String!]
  enumField_eq: StringEnum
  enumField_in: [StringEnum!]
  floatField_eq: Float
  floatField_gt: Float
  floatField_gte: Float
  floatField_lt: Float
  floatField_lte: Float
  floatField_in: [Float!]
  realField_eq: Float
  realField_gt: Float
  realField_gte: Float
  realField_lt: Float
  realField_lte: Float
  realField_in: [Float!]
  idField_eq: ID
  idField_in: [ID!]
  intFieldDefault_eq: Int
  intFieldDefault_gt: Int
  intFieldDefault_gte: Int
  intFieldDefault_lt: Int
  intFieldDefault_lte: Int
  intFieldDefault_in: [Int!]
  smallIntField_eq: Int
  smallIntField_gt: Int
  smallIntField_gte: Int
  smallIntField_lt: Int
  smallIntField_lte: Int
  smallIntField_in: [Int!]
  bigIntField_eq: Int
  bigIntField_gt: Int
  bigIntField_gte: Int
  bigIntField_lt: Int
  bigIntField_lte: Int
  bigIntField_in: [Int!]
  jsonField_json: JSONObject
  stringField_eq: String
  stringField_contains: String
  stringField_startsWith: String
  stringField_endsWith: String
  stringField_in: [String!]
  noSortField_eq: String
  noSortField_contains: String
  noSortField_startsWith: String
  noSortField_endsWith: String
  noSortField_in: [String!]
  stringFieldFilterEqContains_eq: String
  stringFieldFilterEqContains_contains: String
  intFieldFilterLteGte_gte: Int
  intFieldFilterLteGte_lte: Int
  numericField_eq: Float
  numericField_gt: Float
  numericField_gte: Float
  numericField_lt: Float
  numericField_lte: Float
  numericField_in: [Float!]
  numericFieldCustomPrecisionScale_eq: Float
  numericFieldCustomPrecisionScale_gt: Float
  numericFieldCustomPrecisionScale_gte: Float
  numericFieldCustomPrecisionScale_lt: Float
  numericFieldCustomPrecisionScale_lte: Float
  numericFieldCustomPrecisionScale_in: [Float!]
  charField_eq: String
  charField_contains: String
  charField_startsWith: String
  charField_endsWith: String
  charField_in: [String!]
  characterField_eq: String
  characterField_contains: String
  characterField_startsWith: String
  characterField_endsWith: String
  characterField_in: [String!]
  characterVaryingField_eq: String
  characterVaryingField_contains: String
  characterVaryingField_startsWith: String
  characterVaryingField_endsWith: String
  characterVaryingField_in: [String!]
  textField_eq: String
  textField_contains: String
  textField_startsWith: String
  textField_endsWith: String
  textField_in: [String!]
  varcharField_eq: String
  varcharField_contains: String
  varcharField_startsWith: String
  varcharField_endsWith: String
  varcharField_in: [String!]
  intField_eq: Int
  intField_gt: Int
  intField_gte: Int
  intField_lt: Int
  intField_lte: Int
  intField_in: [Int!]
  integerField_eq: Int
  integerField_gt: Int
  integerField_gte: Int
  integerField_lt: Int
  integerField_lte: Int
  integerField_in: [Int!]
  int2Field_eq: Int
  int2Field_gt: Int
  int2Field_gte: Int
  int2Field_lt: Int
  int2Field_lte: Int
  int2Field_in: [Int!]
  int4Field_eq: Int
  int4Field_gt: Int
  int4Field_gte: Int
  int4Field_lt: Int
  int4Field_lte: Int
  int4Field_in: [Int!]
  int8Field_eq: Int
  int8Field_gt: Int
  int8Field_gte: Int
  int8Field_lt: Int
  int8Field_lte: Int
  int8Field_in: [Int!]
  float4Field_eq: Float
  float4Field_gt: Float
  float4Field_gte: Float
  float4Field_lt: Float
  float4Field_lte: Float
  float4Field_in: [Float!]
  float8Field_eq: Float
  float8Field_gt: Float
  float8Field_gte: Float
  float8Field_lt: Float
  float8Field_lte: Float
  float8Field_in: [Float!]
  doublePrecisionField_eq: Float
  doublePrecisionField_gt: Float
  doublePrecisionField_gte: Float
  doublePrecisionField_lt: Float
  doublePrecisionField_lte: Float
  doublePrecisionField_in: [Float!]
  readonlyField_eq: String
  readonlyField_contains: String
  readonlyField_startsWith: String
  readonlyField_endsWith: String
  readonlyField_in: [String!]
  apiOnlyField_eq: String
  apiOnlyField_contains: String
  apiOnlyField_startsWith: String
  apiOnlyField_endsWith: String
  apiOnlyField_in: [String!]
  arrayOfStrings_containsAll: [String!]
  arrayOfStrings_containsNone: [String!]
  arrayOfStrings_containsAny: [String!]
  arrayOfInts_containsAll: [Int!]
  arrayOfInts_containsNone: [Int!]
  arrayOfInts_containsAny: [Int!]
}

input UserWhereUniqueInput {
  emailField: String
  enumField: StringEnum
  stringField: String
}
