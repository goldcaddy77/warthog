// This file has been auto-generated by Warthog.  Do not update directly as it
// will be re-written.  If you need to change this file, update models or add
// new TypeGraphQL objects
// prettier-ignore
// @ts-ignore
import { DateResolver as Date } from 'graphql-scalars';
// prettier-ignore
// @ts-ignore
import { GraphQLID as ID } from 'graphql';
// prettier-ignore
// @ts-ignore
import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';
// prettier-ignore
// @ts-ignore
import { registerEnumType, GraphQLISODateTime as DateTime } from "type-graphql";

// prettier-ignore
// @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires
const { GraphQLJSONObject } = require('graphql-type-json');
// prettier-ignore
// @ts-ignore
import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString } from '../../../src';

// @ts-ignore
import { Segment } from "../src/segment/segment.model";
// @ts-ignore
import { UserSegment } from "../src/user-segment/user-segment.model";
// @ts-ignore
import { User } from "../src/user/user.model";
// @ts-ignore
import { FeatureFlagUser } from "../src/feature-flag-user/feature-flag-user.model";
// @ts-ignore
import { Project } from "../src/project/project.model";
// @ts-ignore
import { FeatureFlag } from "../src/feature-flag/feature-flag.model";
// @ts-ignore
import { FeatureFlagSegment } from "../src/feature-flag-segment/feature-flag-segment.model";
// @ts-ignore
import { Environment } from "../src/environment/environment.model";

export enum SegmentOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  key_ASC = "key_ASC",
  key_DESC = "key_DESC",

  description_ASC = "description_ASC",
  description_DESC = "description_DESC",

  projKey_ASC = "projKey_ASC",
  projKey_DESC = "projKey_DESC",

  projectId_ASC = "projectId_ASC",
  projectId_DESC = "projectId_DESC",

  envKey_ASC = "envKey_ASC",
  envKey_DESC = "envKey_DESC",

  environmentId_ASC = "environmentId_ASC",
  environmentId_DESC = "environmentId_DESC"
}

registerEnumType(SegmentOrderByEnum, {
  name: "SegmentOrderByInput"
});

@TypeGraphQLInputType()
export class SegmentWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  key_eq?: string;

  @TypeGraphQLField({ nullable: true })
  key_contains?: string;

  @TypeGraphQLField({ nullable: true })
  key_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  key_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  key_in?: string[];

  @TypeGraphQLField({ nullable: true })
  description_eq?: string;

  @TypeGraphQLField({ nullable: true })
  description_contains?: string;

  @TypeGraphQLField({ nullable: true })
  description_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  description_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  description_in?: string[];

  @TypeGraphQLField({ nullable: true })
  projKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  projKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  projectId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  envKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  envKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  environmentId_in?: string[];
}

@TypeGraphQLInputType()
export class SegmentWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class SegmentCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  key!: string;

  @TypeGraphQLField()
  description!: string;

  @TypeGraphQLField()
  projKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;

  @TypeGraphQLField()
  envKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId?: string;
}

@TypeGraphQLInputType()
export class SegmentUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  key?: string;

  @TypeGraphQLField({ nullable: true })
  description?: string;

  @TypeGraphQLField({ nullable: true })
  projKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;

  @TypeGraphQLField({ nullable: true })
  envKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId?: string;
}

@ArgsType()
export class SegmentWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => SegmentWhereInput, { nullable: true })
  where?: SegmentWhereInput;

  @TypeGraphQLField(() => SegmentOrderByEnum, { nullable: true })
  orderBy?: SegmentOrderByEnum;
}

@ArgsType()
export class SegmentCreateManyArgs {
  @TypeGraphQLField(() => [SegmentCreateInput])
  data!: SegmentCreateInput[];
}

@ArgsType()
export class SegmentUpdateArgs {
  @TypeGraphQLField() data!: SegmentUpdateInput;
  @TypeGraphQLField() where!: SegmentWhereUniqueInput;
}

export enum UserSegmentOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  projKey_ASC = "projKey_ASC",
  projKey_DESC = "projKey_DESC",

  projectId_ASC = "projectId_ASC",
  projectId_DESC = "projectId_DESC",

  envKey_ASC = "envKey_ASC",
  envKey_DESC = "envKey_DESC",

  environmentId_ASC = "environmentId_ASC",
  environmentId_DESC = "environmentId_DESC",

  userKey_ASC = "userKey_ASC",
  userKey_DESC = "userKey_DESC",

  userId_ASC = "userId_ASC",
  userId_DESC = "userId_DESC",

  segmentKey_ASC = "segmentKey_ASC",
  segmentKey_DESC = "segmentKey_DESC",

  segmentId_ASC = "segmentId_ASC",
  segmentId_DESC = "segmentId_DESC"
}

registerEnumType(UserSegmentOrderByEnum, {
  name: "UserSegmentOrderByInput"
});

@TypeGraphQLInputType()
export class UserSegmentWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  projKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  projKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  projectId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  envKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  envKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  environmentId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  userKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  userKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  userKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  userKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  userKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  userId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  userId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  segmentKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  segmentKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  segmentKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  segmentKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  segmentKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  segmentId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  segmentId_in?: string[];
}

@TypeGraphQLInputType()
export class UserSegmentWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class UserSegmentCreateInput {
  @TypeGraphQLField()
  projKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;

  @TypeGraphQLField()
  envKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId?: string;

  @TypeGraphQLField()
  userKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField()
  segmentKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  segmentId?: string;
}

@TypeGraphQLInputType()
export class UserSegmentUpdateInput {
  @TypeGraphQLField({ nullable: true })
  projKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;

  @TypeGraphQLField({ nullable: true })
  envKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId?: string;

  @TypeGraphQLField({ nullable: true })
  userKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField({ nullable: true })
  segmentKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  segmentId?: string;
}

@ArgsType()
export class UserSegmentWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => UserSegmentWhereInput, { nullable: true })
  where?: UserSegmentWhereInput;

  @TypeGraphQLField(() => UserSegmentOrderByEnum, { nullable: true })
  orderBy?: UserSegmentOrderByEnum;
}

@ArgsType()
export class UserSegmentCreateManyArgs {
  @TypeGraphQLField(() => [UserSegmentCreateInput])
  data!: UserSegmentCreateInput[];
}

@ArgsType()
export class UserSegmentUpdateArgs {
  @TypeGraphQLField() data!: UserSegmentUpdateInput;
  @TypeGraphQLField() where!: UserSegmentWhereUniqueInput;
}

export enum UserOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  key_ASC = "key_ASC",
  key_DESC = "key_DESC"
}

registerEnumType(UserOrderByEnum, {
  name: "UserOrderByInput"
});

@TypeGraphQLInputType()
export class UserWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  key_eq?: string;

  @TypeGraphQLField({ nullable: true })
  key_contains?: string;

  @TypeGraphQLField({ nullable: true })
  key_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  key_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  key_in?: string[];
}

@TypeGraphQLInputType()
export class UserWhereUniqueInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;

  @TypeGraphQLField(() => String, { nullable: true })
  key?: string;
}

@TypeGraphQLInputType()
export class UserCreateInput {
  @TypeGraphQLField()
  key!: string;
}

@TypeGraphQLInputType()
export class UserUpdateInput {
  @TypeGraphQLField({ nullable: true })
  key?: string;
}

@ArgsType()
export class UserWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => UserWhereInput, { nullable: true })
  where?: UserWhereInput;

  @TypeGraphQLField(() => UserOrderByEnum, { nullable: true })
  orderBy?: UserOrderByEnum;
}

@ArgsType()
export class UserCreateManyArgs {
  @TypeGraphQLField(() => [UserCreateInput])
  data!: UserCreateInput[];
}

@ArgsType()
export class UserUpdateArgs {
  @TypeGraphQLField() data!: UserUpdateInput;
  @TypeGraphQLField() where!: UserWhereUniqueInput;
}

export enum FeatureFlagUserOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  featureKey_ASC = "featureKey_ASC",
  featureKey_DESC = "featureKey_DESC",

  featureFlagId_ASC = "featureFlagId_ASC",
  featureFlagId_DESC = "featureFlagId_DESC",

  userKey_ASC = "userKey_ASC",
  userKey_DESC = "userKey_DESC",

  userId_ASC = "userId_ASC",
  userId_DESC = "userId_DESC",

  projKey_ASC = "projKey_ASC",
  projKey_DESC = "projKey_DESC",

  projectId_ASC = "projectId_ASC",
  projectId_DESC = "projectId_DESC",

  envKey_ASC = "envKey_ASC",
  envKey_DESC = "envKey_DESC",

  environmentId_ASC = "environmentId_ASC",
  environmentId_DESC = "environmentId_DESC"
}

registerEnumType(FeatureFlagUserOrderByEnum, {
  name: "FeatureFlagUserOrderByInput"
});

@TypeGraphQLInputType()
export class FeatureFlagUserWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  featureKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  featureKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  featureKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  featureKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  featureKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  featureFlagId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  featureFlagId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  userKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  userKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  userKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  userKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  userKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  userId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  userId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  projKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  projKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  projectId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  envKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  envKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  environmentId_in?: string[];
}

@TypeGraphQLInputType()
export class FeatureFlagUserWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class FeatureFlagUserCreateInput {
  @TypeGraphQLField()
  featureKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  featureFlagId?: string;

  @TypeGraphQLField()
  userKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField()
  projKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;

  @TypeGraphQLField()
  envKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId?: string;
}

@TypeGraphQLInputType()
export class FeatureFlagUserUpdateInput {
  @TypeGraphQLField({ nullable: true })
  featureKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  featureFlagId?: string;

  @TypeGraphQLField({ nullable: true })
  userKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  userId?: string;

  @TypeGraphQLField({ nullable: true })
  projKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;

  @TypeGraphQLField({ nullable: true })
  envKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId?: string;
}

@ArgsType()
export class FeatureFlagUserWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => FeatureFlagUserWhereInput, { nullable: true })
  where?: FeatureFlagUserWhereInput;

  @TypeGraphQLField(() => FeatureFlagUserOrderByEnum, { nullable: true })
  orderBy?: FeatureFlagUserOrderByEnum;
}

@ArgsType()
export class FeatureFlagUserCreateManyArgs {
  @TypeGraphQLField(() => [FeatureFlagUserCreateInput])
  data!: FeatureFlagUserCreateInput[];
}

@ArgsType()
export class FeatureFlagUserUpdateArgs {
  @TypeGraphQLField() data!: FeatureFlagUserUpdateInput;
  @TypeGraphQLField() where!: FeatureFlagUserWhereUniqueInput;
}

export enum ProjectOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  key_ASC = "key_ASC",
  key_DESC = "key_DESC"
}

registerEnumType(ProjectOrderByEnum, {
  name: "ProjectOrderByInput"
});

@TypeGraphQLInputType()
export class ProjectWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  key_eq?: string;

  @TypeGraphQLField({ nullable: true })
  key_contains?: string;

  @TypeGraphQLField({ nullable: true })
  key_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  key_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  key_in?: string[];
}

@TypeGraphQLInputType()
export class ProjectWhereUniqueInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id?: string;

  @TypeGraphQLField(() => String, { nullable: true })
  key?: string;
}

@TypeGraphQLInputType()
export class ProjectCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  key!: string;
}

@TypeGraphQLInputType()
export class ProjectUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  key?: string;
}

@ArgsType()
export class ProjectWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => ProjectWhereInput, { nullable: true })
  where?: ProjectWhereInput;

  @TypeGraphQLField(() => ProjectOrderByEnum, { nullable: true })
  orderBy?: ProjectOrderByEnum;
}

@ArgsType()
export class ProjectCreateManyArgs {
  @TypeGraphQLField(() => [ProjectCreateInput])
  data!: ProjectCreateInput[];
}

@ArgsType()
export class ProjectUpdateArgs {
  @TypeGraphQLField() data!: ProjectUpdateInput;
  @TypeGraphQLField() where!: ProjectWhereUniqueInput;
}

export enum FeatureFlagOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  key_ASC = "key_ASC",
  key_DESC = "key_DESC",

  projKey_ASC = "projKey_ASC",
  projKey_DESC = "projKey_DESC",

  projectId_ASC = "projectId_ASC",
  projectId_DESC = "projectId_DESC"
}

registerEnumType(FeatureFlagOrderByEnum, {
  name: "FeatureFlagOrderByInput"
});

@TypeGraphQLInputType()
export class FeatureFlagWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  key_eq?: string;

  @TypeGraphQLField({ nullable: true })
  key_contains?: string;

  @TypeGraphQLField({ nullable: true })
  key_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  key_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  key_in?: string[];

  @TypeGraphQLField({ nullable: true })
  projKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  projKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  projectId_in?: string[];
}

@TypeGraphQLInputType()
export class FeatureFlagWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class FeatureFlagCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  key!: string;

  @TypeGraphQLField()
  projKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;
}

@TypeGraphQLInputType()
export class FeatureFlagUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  key?: string;

  @TypeGraphQLField({ nullable: true })
  projKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;
}

@ArgsType()
export class FeatureFlagWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => FeatureFlagWhereInput, { nullable: true })
  where?: FeatureFlagWhereInput;

  @TypeGraphQLField(() => FeatureFlagOrderByEnum, { nullable: true })
  orderBy?: FeatureFlagOrderByEnum;
}

@ArgsType()
export class FeatureFlagCreateManyArgs {
  @TypeGraphQLField(() => [FeatureFlagCreateInput])
  data!: FeatureFlagCreateInput[];
}

@ArgsType()
export class FeatureFlagUpdateArgs {
  @TypeGraphQLField() data!: FeatureFlagUpdateInput;
  @TypeGraphQLField() where!: FeatureFlagWhereUniqueInput;
}

export enum FeatureFlagSegmentOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  projKey_ASC = "projKey_ASC",
  projKey_DESC = "projKey_DESC",

  projectId_ASC = "projectId_ASC",
  projectId_DESC = "projectId_DESC",

  envKey_ASC = "envKey_ASC",
  envKey_DESC = "envKey_DESC",

  environmentId_ASC = "environmentId_ASC",
  environmentId_DESC = "environmentId_DESC",

  featureKey_ASC = "featureKey_ASC",
  featureKey_DESC = "featureKey_DESC",

  featureFlagId_ASC = "featureFlagId_ASC",
  featureFlagId_DESC = "featureFlagId_DESC",

  segmentKey_ASC = "segmentKey_ASC",
  segmentKey_DESC = "segmentKey_DESC",

  segmentId_ASC = "segmentId_ASC",
  segmentId_DESC = "segmentId_DESC"
}

registerEnumType(FeatureFlagSegmentOrderByEnum, {
  name: "FeatureFlagSegmentOrderByInput"
});

@TypeGraphQLInputType()
export class FeatureFlagSegmentWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  projKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  projKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  projectId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  envKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  envKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  envKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  environmentId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  featureKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  featureKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  featureKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  featureKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  featureKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  featureFlagId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  featureFlagId_in?: string[];

  @TypeGraphQLField({ nullable: true })
  segmentKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  segmentKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  segmentKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  segmentKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  segmentKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  segmentId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  segmentId_in?: string[];
}

@TypeGraphQLInputType()
export class FeatureFlagSegmentWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class FeatureFlagSegmentCreateInput {
  @TypeGraphQLField()
  projKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;

  @TypeGraphQLField()
  envKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId?: string;

  @TypeGraphQLField()
  featureKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  featureFlagId?: string;

  @TypeGraphQLField()
  segmentKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  segmentId?: string;
}

@TypeGraphQLInputType()
export class FeatureFlagSegmentUpdateInput {
  @TypeGraphQLField({ nullable: true })
  projKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;

  @TypeGraphQLField({ nullable: true })
  envKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  environmentId?: string;

  @TypeGraphQLField({ nullable: true })
  featureKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  featureFlagId?: string;

  @TypeGraphQLField({ nullable: true })
  segmentKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  segmentId?: string;
}

@ArgsType()
export class FeatureFlagSegmentWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => FeatureFlagSegmentWhereInput, { nullable: true })
  where?: FeatureFlagSegmentWhereInput;

  @TypeGraphQLField(() => FeatureFlagSegmentOrderByEnum, { nullable: true })
  orderBy?: FeatureFlagSegmentOrderByEnum;
}

@ArgsType()
export class FeatureFlagSegmentCreateManyArgs {
  @TypeGraphQLField(() => [FeatureFlagSegmentCreateInput])
  data!: FeatureFlagSegmentCreateInput[];
}

@ArgsType()
export class FeatureFlagSegmentUpdateArgs {
  @TypeGraphQLField() data!: FeatureFlagSegmentUpdateInput;
  @TypeGraphQLField() where!: FeatureFlagSegmentWhereUniqueInput;
}

export enum EnvironmentOrderByEnum {
  createdAt_ASC = "createdAt_ASC",
  createdAt_DESC = "createdAt_DESC",

  updatedAt_ASC = "updatedAt_ASC",
  updatedAt_DESC = "updatedAt_DESC",

  deletedAt_ASC = "deletedAt_ASC",
  deletedAt_DESC = "deletedAt_DESC",

  name_ASC = "name_ASC",
  name_DESC = "name_DESC",

  key_ASC = "key_ASC",
  key_DESC = "key_DESC",

  projKey_ASC = "projKey_ASC",
  projKey_DESC = "projKey_DESC",

  projectId_ASC = "projectId_ASC",
  projectId_DESC = "projectId_DESC"
}

registerEnumType(EnvironmentOrderByEnum, {
  name: "EnvironmentOrderByInput"
});

@TypeGraphQLInputType()
export class EnvironmentWhereInput {
  @TypeGraphQLField(() => ID, { nullable: true })
  id_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  id_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  createdAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  createdById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  createdById_in?: string[];

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  updatedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  updatedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  updatedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  deletedAt_all?: Boolean;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_eq?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_lte?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gt?: Date;

  @TypeGraphQLField(() => DateTime, { nullable: true })
  deletedAt_gte?: Date;

  @TypeGraphQLField(() => ID, { nullable: true })
  deletedById_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  deletedById_in?: string[];

  @TypeGraphQLField({ nullable: true })
  name_eq?: string;

  @TypeGraphQLField({ nullable: true })
  name_contains?: string;

  @TypeGraphQLField({ nullable: true })
  name_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  name_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  name_in?: string[];

  @TypeGraphQLField({ nullable: true })
  key_eq?: string;

  @TypeGraphQLField({ nullable: true })
  key_contains?: string;

  @TypeGraphQLField({ nullable: true })
  key_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  key_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  key_in?: string[];

  @TypeGraphQLField({ nullable: true })
  projKey_eq?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_contains?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_startsWith?: string;

  @TypeGraphQLField({ nullable: true })
  projKey_endsWith?: string;

  @TypeGraphQLField(() => [String], { nullable: true })
  projKey_in?: string[];

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId_eq?: string;

  @TypeGraphQLField(() => [ID], { nullable: true })
  projectId_in?: string[];
}

@TypeGraphQLInputType()
export class EnvironmentWhereUniqueInput {
  @TypeGraphQLField(() => ID)
  id?: string;
}

@TypeGraphQLInputType()
export class EnvironmentCreateInput {
  @TypeGraphQLField()
  name!: string;

  @TypeGraphQLField()
  key!: string;

  @TypeGraphQLField()
  projKey!: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;
}

@TypeGraphQLInputType()
export class EnvironmentUpdateInput {
  @TypeGraphQLField({ nullable: true })
  name?: string;

  @TypeGraphQLField({ nullable: true })
  key?: string;

  @TypeGraphQLField({ nullable: true })
  projKey?: string;

  @TypeGraphQLField(() => ID, { nullable: true })
  projectId?: string;
}

@ArgsType()
export class EnvironmentWhereArgs extends PaginationArgs {
  @TypeGraphQLField(() => EnvironmentWhereInput, { nullable: true })
  where?: EnvironmentWhereInput;

  @TypeGraphQLField(() => EnvironmentOrderByEnum, { nullable: true })
  orderBy?: EnvironmentOrderByEnum;
}

@ArgsType()
export class EnvironmentCreateManyArgs {
  @TypeGraphQLField(() => [EnvironmentCreateInput])
  data!: EnvironmentCreateInput[];
}

@ArgsType()
export class EnvironmentUpdateArgs {
  @TypeGraphQLField() data!: EnvironmentUpdateInput;
  @TypeGraphQLField() where!: EnvironmentWhereUniqueInput;
}
