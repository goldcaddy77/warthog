"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type Environment {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  updatedAt: DateTime
  updatedById: ID
  deletedAt: DateTime
  deletedById: ID
  version: Int!
  ownerId: ID!
  name: String!
  key: String!
  projKey: String!
  project: Project
  projectId: ID
  segments: [Segment!]!
  featureFlagUsers: [FeatureFlagUser!]!
  featureFlagSegments: [FeatureFlagSegment!]!
  userSegments: [UserSegment!]!
}

input EnvironmentCreateInput {
  name: String!
  key: String!
  projKey: String!
  projectId: ID
}

enum EnvironmentOrderByInput {
  name_ASC
  name_DESC
  key_ASC
  key_DESC
  projKey_ASC
  projKey_DESC
  projectId_ASC
  projectId_DESC
  createdAt_ASC
  createdAt_DESC
  createdById_ASC
  createdById_DESC
  updatedAt_ASC
  updatedAt_DESC
  updatedById_ASC
  updatedById_DESC
  deletedAt_ASC
  deletedAt_DESC
  deletedById_ASC
  deletedById_DESC
  version_ASC
  version_DESC
  ownerId_ASC
  ownerId_DESC
  id_ASC
  id_DESC
}

input EnvironmentUpdateInput {
  name: String
  key: String
  projKey: String
  projectId: ID
}

input EnvironmentWhereInput {
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  key_eq: String
  key_contains: String
  key_startsWith: String
  key_endsWith: String
  key_in: [String!]
  projKey_eq: String
  projKey_contains: String
  projKey_startsWith: String
  projKey_endsWith: String
  projKey_in: [String!]
  projectId_eq: ID
  projectId_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  ownerId_eq: ID
  ownerId_in: [ID!]
  id_in: [ID!]
}

input EnvironmentWhereUniqueInput {
  id: ID!
}

type FeatureFlag {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  updatedAt: DateTime
  updatedById: ID
  deletedAt: DateTime
  deletedById: ID
  version: Int!
  ownerId: ID!
  name: String!
  key: String!
  projKey: String!
  project: Project
  projectId: ID
  featureFlagUsers: [FeatureFlagUser!]!
  featureFlagSegments: [FeatureFlagSegment!]!
}

input FeatureFlagCreateInput {
  name: String!
  key: String!
  projKey: String!
  projectId: ID
}

enum FeatureFlagOrderByInput {
  name_ASC
  name_DESC
  key_ASC
  key_DESC
  projKey_ASC
  projKey_DESC
  projectId_ASC
  projectId_DESC
  createdAt_ASC
  createdAt_DESC
  createdById_ASC
  createdById_DESC
  updatedAt_ASC
  updatedAt_DESC
  updatedById_ASC
  updatedById_DESC
  deletedAt_ASC
  deletedAt_DESC
  deletedById_ASC
  deletedById_DESC
  version_ASC
  version_DESC
  ownerId_ASC
  ownerId_DESC
  id_ASC
  id_DESC
}

type FeatureFlagSegment {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  updatedAt: DateTime
  updatedById: ID
  deletedAt: DateTime
  deletedById: ID
  version: Int!
  ownerId: ID!
  projKey: String!
  project: Project
  projectId: ID
  envKey: String!
  environment: Environment
  environmentId: ID
  featureKey: String!
  featureFlag: FeatureFlag
  featureFlagId: ID
  segmentKey: String!
  segment: Segment
  segmentId: ID
}

input FeatureFlagSegmentCreateInput {
  projKey: String!
  projectId: ID
  envKey: String!
  environmentId: ID
  featureKey: String!
  featureFlagId: ID
  segmentKey: String!
  segmentId: ID
}

enum FeatureFlagSegmentOrderByInput {
  projKey_ASC
  projKey_DESC
  projectId_ASC
  projectId_DESC
  envKey_ASC
  envKey_DESC
  environmentId_ASC
  environmentId_DESC
  featureKey_ASC
  featureKey_DESC
  featureFlagId_ASC
  featureFlagId_DESC
  segmentKey_ASC
  segmentKey_DESC
  segmentId_ASC
  segmentId_DESC
  createdAt_ASC
  createdAt_DESC
  createdById_ASC
  createdById_DESC
  updatedAt_ASC
  updatedAt_DESC
  updatedById_ASC
  updatedById_DESC
  deletedAt_ASC
  deletedAt_DESC
  deletedById_ASC
  deletedById_DESC
  version_ASC
  version_DESC
  ownerId_ASC
  ownerId_DESC
  id_ASC
  id_DESC
}

input FeatureFlagSegmentUpdateInput {
  projKey: String
  projectId: ID
  envKey: String
  environmentId: ID
  featureKey: String
  featureFlagId: ID
  segmentKey: String
  segmentId: ID
}

input FeatureFlagSegmentWhereInput {
  projKey_eq: String
  projKey_contains: String
  projKey_startsWith: String
  projKey_endsWith: String
  projKey_in: [String!]
  projectId_eq: ID
  projectId_in: [ID!]
  envKey_eq: String
  envKey_contains: String
  envKey_startsWith: String
  envKey_endsWith: String
  envKey_in: [String!]
  environmentId_eq: ID
  environmentId_in: [ID!]
  featureKey_eq: String
  featureKey_contains: String
  featureKey_startsWith: String
  featureKey_endsWith: String
  featureKey_in: [String!]
  featureFlagId_eq: ID
  featureFlagId_in: [ID!]
  segmentKey_eq: String
  segmentKey_contains: String
  segmentKey_startsWith: String
  segmentKey_endsWith: String
  segmentKey_in: [String!]
  segmentId_eq: ID
  segmentId_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  ownerId_eq: ID
  ownerId_in: [ID!]
  id_in: [ID!]
}

input FeatureFlagSegmentWhereUniqueInput {
  id: ID!
}

input FeatureFlagsForUserInput {
  projKey: String!
  envKey: String!
  userKey: String!
}

input FeatureFlagUpdateInput {
  name: String
  key: String
  projKey: String
  projectId: ID
}

type FeatureFlagUser {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  updatedAt: DateTime
  updatedById: ID
  deletedAt: DateTime
  deletedById: ID
  version: Int!
  ownerId: ID!
  featureKey: String!
  featureFlag: FeatureFlag
  featureFlagId: ID
  userKey: String!
  user: User
  userId: ID
  projKey: String!
  project: Project
  projectId: ID
  envKey: String!
  environment: Environment
  environmentId: ID
}

input FeatureFlagUserCreateInput {
  featureKey: String!
  featureFlagId: ID
  userKey: String!
  userId: ID
  projKey: String!
  projectId: ID
  envKey: String!
  environmentId: ID
}

enum FeatureFlagUserOrderByInput {
  featureKey_ASC
  featureKey_DESC
  featureFlagId_ASC
  featureFlagId_DESC
  userKey_ASC
  userKey_DESC
  userId_ASC
  userId_DESC
  projKey_ASC
  projKey_DESC
  projectId_ASC
  projectId_DESC
  envKey_ASC
  envKey_DESC
  environmentId_ASC
  environmentId_DESC
  createdAt_ASC
  createdAt_DESC
  createdById_ASC
  createdById_DESC
  updatedAt_ASC
  updatedAt_DESC
  updatedById_ASC
  updatedById_DESC
  deletedAt_ASC
  deletedAt_DESC
  deletedById_ASC
  deletedById_DESC
  version_ASC
  version_DESC
  ownerId_ASC
  ownerId_DESC
  id_ASC
  id_DESC
}

input FeatureFlagUserUpdateInput {
  featureKey: String
  featureFlagId: ID
  userKey: String
  userId: ID
  projKey: String
  projectId: ID
  envKey: String
  environmentId: ID
}

input FeatureFlagUserWhereInput {
  featureKey_eq: String
  featureKey_contains: String
  featureKey_startsWith: String
  featureKey_endsWith: String
  featureKey_in: [String!]
  featureFlagId_eq: ID
  featureFlagId_in: [ID!]
  userKey_eq: String
  userKey_contains: String
  userKey_startsWith: String
  userKey_endsWith: String
  userKey_in: [String!]
  userId_eq: ID
  userId_in: [ID!]
  projKey_eq: String
  projKey_contains: String
  projKey_startsWith: String
  projKey_endsWith: String
  projKey_in: [String!]
  projectId_eq: ID
  projectId_in: [ID!]
  envKey_eq: String
  envKey_contains: String
  envKey_startsWith: String
  envKey_endsWith: String
  envKey_in: [String!]
  environmentId_eq: ID
  environmentId_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  ownerId_eq: ID
  ownerId_in: [ID!]
  id_in: [ID!]
}

input FeatureFlagUserWhereUniqueInput {
  id: ID!
}

input FeatureFlagWhereInput {
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  key_eq: String
  key_contains: String
  key_startsWith: String
  key_endsWith: String
  key_in: [String!]
  projKey_eq: String
  projKey_contains: String
  projKey_startsWith: String
  projKey_endsWith: String
  projKey_in: [String!]
  projectId_eq: ID
  projectId_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  ownerId_eq: ID
  ownerId_in: [ID!]
  id_in: [ID!]
}

input FeatureFlagWhereUniqueInput {
  id: ID!
}

type Mutation {
  createEnvironment(data: EnvironmentCreateInput!): Environment!
  updateEnvironment(data: EnvironmentUpdateInput!, where: EnvironmentWhereUniqueInput!): Environment!
  deleteEnvironment(where: EnvironmentWhereUniqueInput!): StandardDeleteResponse!
  createFeatureFlagSegment(data: FeatureFlagSegmentCreateInput!): FeatureFlagSegment!
  updateFeatureFlagSegment(data: FeatureFlagSegmentUpdateInput!, where: FeatureFlagSegmentWhereUniqueInput!): FeatureFlagSegment!
  deleteFeatureFlagSegment(where: FeatureFlagSegmentWhereUniqueInput!): StandardDeleteResponse!
  createFeatureFlagUser(data: FeatureFlagUserCreateInput!): FeatureFlagUser!
  updateFeatureFlagUser(data: FeatureFlagUserUpdateInput!, where: FeatureFlagUserWhereUniqueInput!): FeatureFlagUser!
  deleteFeatureFlagUser(where: FeatureFlagUserWhereUniqueInput!): StandardDeleteResponse!
  createFeatureFlag(data: FeatureFlagCreateInput!): FeatureFlag!
  updateFeatureFlag(data: FeatureFlagUpdateInput!, where: FeatureFlagWhereUniqueInput!): FeatureFlag!
  deleteFeatureFlag(where: FeatureFlagWhereUniqueInput!): StandardDeleteResponse!
  createProject(data: ProjectCreateInput!): Project!
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project!
  deleteProject(where: ProjectWhereUniqueInput!): StandardDeleteResponse!
  createSegment(data: SegmentCreateInput!): Segment!
  updateSegment(data: SegmentUpdateInput!, where: SegmentWhereUniqueInput!): Segment!
  deleteSegment(where: SegmentWhereUniqueInput!): StandardDeleteResponse!
  createUserSegment(data: UserSegmentCreateInput!): UserSegment!
  updateUserSegment(data: UserSegmentUpdateInput!, where: UserSegmentWhereUniqueInput!): UserSegment!
  deleteUserSegment(where: UserSegmentWhereUniqueInput!): StandardDeleteResponse!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Project {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  updatedAt: DateTime
  updatedById: ID
  deletedAt: DateTime
  deletedById: ID
  version: Int!
  ownerId: ID!
  name: String!
  key: String!
  environments: [Environment!]!
  segments: [Segment!]!
  featureFlags: [FeatureFlag!]!
  featureFlagUsers: [FeatureFlagUser!]!
  featureFlagSegments: [FeatureFlagSegment!]!
  userSegments: [UserSegment!]!
}

input ProjectCreateInput {
  name: String!
  key: String!
}

enum ProjectOrderByInput {
  name_ASC
  name_DESC
  key_ASC
  key_DESC
  createdAt_ASC
  createdAt_DESC
  createdById_ASC
  createdById_DESC
  updatedAt_ASC
  updatedAt_DESC
  updatedById_ASC
  updatedById_DESC
  deletedAt_ASC
  deletedAt_DESC
  deletedById_ASC
  deletedById_DESC
  version_ASC
  version_DESC
  ownerId_ASC
  ownerId_DESC
  id_ASC
  id_DESC
}

input ProjectUpdateInput {
  name: String
  key: String
}

input ProjectWhereInput {
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  key_eq: String
  key_contains: String
  key_startsWith: String
  key_endsWith: String
  key_in: [String!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  ownerId_eq: ID
  ownerId_in: [ID!]
  id_in: [ID!]
}

input ProjectWhereUniqueInput {
  key: String
  id: ID
}

type Query {
  environments(offset: Int, limit: Int = 50, where: EnvironmentWhereInput, orderBy: EnvironmentOrderByInput): [Environment!]!
  environment(where: EnvironmentWhereUniqueInput!): Environment!
  featureFlagSegments(offset: Int, limit: Int = 50, where: FeatureFlagSegmentWhereInput, orderBy: FeatureFlagSegmentOrderByInput): [FeatureFlagSegment!]!
  featureFlagSegment(where: FeatureFlagSegmentWhereUniqueInput!): FeatureFlagSegment!
  featureFlagUsers(offset: Int, limit: Int = 50, where: FeatureFlagUserWhereInput, orderBy: FeatureFlagUserOrderByInput): [FeatureFlagUser!]!
  featureFlagUser(where: FeatureFlagUserWhereUniqueInput!): FeatureFlagUser!
  featureFlags(offset: Int, limit: Int = 50, where: FeatureFlagWhereInput, orderBy: FeatureFlagOrderByInput): [FeatureFlag!]!
  featureFlagsForUser(where: FeatureFlagsForUserInput!): [String!]!
  featureFlag(where: FeatureFlagWhereUniqueInput!): FeatureFlag!
  projects(offset: Int, limit: Int = 50, where: ProjectWhereInput, orderBy: ProjectOrderByInput): [Project!]!
  project(where: ProjectWhereUniqueInput!): Project!
  segments(offset: Int, limit: Int = 50, where: SegmentWhereInput, orderBy: SegmentOrderByInput): [Segment!]!
  segment(where: SegmentWhereUniqueInput!): Segment!
  userSegments(offset: Int, limit: Int = 50, where: UserSegmentWhereInput, orderBy: UserSegmentOrderByInput): [UserSegment!]!
  userSegment(where: UserSegmentWhereUniqueInput!): UserSegment!
  user(where: UserWhereUniqueInput!): User!
}

type Segment {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  updatedAt: DateTime
  updatedById: ID
  deletedAt: DateTime
  deletedById: ID
  version: Int!
  ownerId: ID!
  name: String!
  key: String!
  description: String!
  projKey: String!
  project: Project
  projectId: ID
  envKey: String!
  environment: Environment
  environmentId: ID
  featureFlagSegments: [FeatureFlagSegment!]!
  userSegments: [UserSegment!]!
}

input SegmentCreateInput {
  name: String!
  key: String!
  description: String!
  projKey: String!
  projectId: ID
  envKey: String!
  environmentId: ID
}

enum SegmentOrderByInput {
  name_ASC
  name_DESC
  key_ASC
  key_DESC
  description_ASC
  description_DESC
  projKey_ASC
  projKey_DESC
  projectId_ASC
  projectId_DESC
  envKey_ASC
  envKey_DESC
  environmentId_ASC
  environmentId_DESC
  createdAt_ASC
  createdAt_DESC
  createdById_ASC
  createdById_DESC
  updatedAt_ASC
  updatedAt_DESC
  updatedById_ASC
  updatedById_DESC
  deletedAt_ASC
  deletedAt_DESC
  deletedById_ASC
  deletedById_DESC
  version_ASC
  version_DESC
  ownerId_ASC
  ownerId_DESC
  id_ASC
  id_DESC
}

input SegmentUpdateInput {
  name: String
  key: String
  description: String
  projKey: String
  projectId: ID
  envKey: String
  environmentId: ID
}

input SegmentWhereInput {
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  key_eq: String
  key_contains: String
  key_startsWith: String
  key_endsWith: String
  key_in: [String!]
  description_eq: String
  description_contains: String
  description_startsWith: String
  description_endsWith: String
  description_in: [String!]
  projKey_eq: String
  projKey_contains: String
  projKey_startsWith: String
  projKey_endsWith: String
  projKey_in: [String!]
  projectId_eq: ID
  projectId_in: [ID!]
  envKey_eq: String
  envKey_contains: String
  envKey_startsWith: String
  envKey_endsWith: String
  envKey_in: [String!]
  environmentId_eq: ID
  environmentId_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  ownerId_eq: ID
  ownerId_in: [ID!]
  id_in: [ID!]
}

input SegmentWhereUniqueInput {
  id: ID!
}

type StandardDeleteResponse {
  id: ID!
}

type User {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  updatedAt: DateTime
  updatedById: ID
  deletedAt: DateTime
  deletedById: ID
  version: Int!
  ownerId: ID!
  key: String!
  featureFlagUsers: [FeatureFlagUser!]!
  userSegments: [UserSegment!]!
}

input UserCreateInput {
  key: String!
}

type UserSegment {
  id: ID!
  createdAt: DateTime!
  createdById: ID!
  updatedAt: DateTime
  updatedById: ID
  deletedAt: DateTime
  deletedById: ID
  version: Int!
  ownerId: ID!
  projKey: String!
  project: Project
  projectId: ID
  envKey: String!
  environment: Environment
  environmentId: ID
  userKey: String!
  user: User
  userId: ID
  segmentKey: String!
  segment: Segment
  segmentId: ID
}

input UserSegmentCreateInput {
  projKey: String!
  projectId: ID
  envKey: String!
  environmentId: ID
  userKey: String!
  userId: ID
  segmentKey: String!
  segmentId: ID
}

enum UserSegmentOrderByInput {
  projKey_ASC
  projKey_DESC
  projectId_ASC
  projectId_DESC
  envKey_ASC
  envKey_DESC
  environmentId_ASC
  environmentId_DESC
  userKey_ASC
  userKey_DESC
  userId_ASC
  userId_DESC
  segmentKey_ASC
  segmentKey_DESC
  segmentId_ASC
  segmentId_DESC
  createdAt_ASC
  createdAt_DESC
  createdById_ASC
  createdById_DESC
  updatedAt_ASC
  updatedAt_DESC
  updatedById_ASC
  updatedById_DESC
  deletedAt_ASC
  deletedAt_DESC
  deletedById_ASC
  deletedById_DESC
  version_ASC
  version_DESC
  ownerId_ASC
  ownerId_DESC
  id_ASC
  id_DESC
}

input UserSegmentUpdateInput {
  projKey: String
  projectId: ID
  envKey: String
  environmentId: ID
  userKey: String
  userId: ID
  segmentKey: String
  segmentId: ID
}

input UserSegmentWhereInput {
  projKey_eq: String
  projKey_contains: String
  projKey_startsWith: String
  projKey_endsWith: String
  projKey_in: [String!]
  projectId_eq: ID
  projectId_in: [ID!]
  envKey_eq: String
  envKey_contains: String
  envKey_startsWith: String
  envKey_endsWith: String
  envKey_in: [String!]
  environmentId_eq: ID
  environmentId_in: [ID!]
  userKey_eq: String
  userKey_contains: String
  userKey_startsWith: String
  userKey_endsWith: String
  userKey_in: [String!]
  userId_eq: ID
  userId_in: [ID!]
  segmentKey_eq: String
  segmentKey_contains: String
  segmentKey_startsWith: String
  segmentKey_endsWith: String
  segmentKey_in: [String!]
  segmentId_eq: ID
  segmentId_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  ownerId_eq: ID
  ownerId_in: [ID!]
  id_in: [ID!]
}

input UserSegmentWhereUniqueInput {
  id: ID!
}

input UserUpdateInput {
  key: String
}

input UserWhereInput {
  key_eq: String
  key_contains: String
  key_startsWith: String
  key_endsWith: String
  key_in: [String!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  version_eq: Int
  version_gt: Int
  version_gte: Int
  version_lt: Int
  version_lte: Int
  version_in: [Int!]
  ownerId_eq: ID
  ownerId_in: [ID!]
  id_in: [ID!]
}

input UserWhereUniqueInput {
  key: String
  id: ID
}
